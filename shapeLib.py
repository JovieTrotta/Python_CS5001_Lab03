'''
Jovienne Trotta
CS 5001 | Fall 2022
Lab 3: A Shape Collection

This is my shape library file, where all my shape functions are kept.
'''

import turtle as t

#this will send the "turtle" to a specific point on the screen
def goto(x,y):
    t.up()
    t.goto(x,y)
    t.down()

#this will create a function that creates a single block
def blocks(x,y,size):
    goto(x,y)
    t.forward(size)
    t.left(90)
    t.forward(size)
    t.left(90)
    t.forward(size)
    t.left(90)
    t.forward(size)
    t.left(90)
    t.up()
    t.home()
    t.down()

#this will draw a circle
def draw_circle(x,y,radius):
    t.up()
    goto(x,y)
    t.down()
    t.circle(radius)
    t.up()
    t.home()
    t.down()

#this will draw one traingle
def triangle(x,y,scale,fill,color):
    t.up()
    goto(x,y)
    t.down()
    if fill == True:
        t.fillcolor(color)
        t.color(color)
        t.begin_fill()
        t.forward(scale)
        t.left(120)
        t.forward(scale)
        t.left(120)
        t.forward(scale)
        t.end_fill()
        t.up()
        t.home()
        t.down()
    else:
        t.color(color)
        t.forward(scale)
        t.left(120)
        t.forward(scale)
        t.left(120)
        t.forward(scale)
        t.up()
        t.home()
        t.down()

#this will draw one pentagon
def pentagon(x,y,scale,fill,color):
    t.up()
    goto(x,y)
    t.down()
    if fill == True:
        t.fillcolor(color)
        t.color(color)
        t.begin_fill()
        t.forward(scale)
        t.left(72)
        t.forward(scale)
        t.left(72)
        t.forward(scale)
        t.left(72)
        t.forward(scale)
        t.left(72)
        t.forward(scale)
        t.end_fill()
        t.up()
        t.home()
        t.down()
    else:
        t.color(color)
        t.forward(scale)
        t.left(72)
        t.forward(scale)
        t.left(72)
        t.forward(scale)
        t.left(72)
        t.forward(scale)
        t.left(72)
        t.forward(scale)
        t.up()
        t.home()
        t.down()

#this will draw one bar
def bar(x,y,scale,fill,color):
    t.up()
    goto(x,y)
    t.down()
    if fill == True:
        t.fillcolor(color)
        t.color(color)
        t.begin_fill()
        t.forward(0.25*scale)
        t.left(90)
        t.forward(2*scale)
        t.left(90)
        t.forward(0.25*scale)
        t.left(90)
        t.forward(2*scale)
        t.end_fill()
        t.up()
        t.home()
        t.down()
    else:
        t.color(color)
        t.forward(0.25*scale)
        t.left(90)
        t.forward(2*scale)
        t.left(90)
        t.forward(0.25*scale)
        t.left(90)
        t.forward(2*scale)
        t.up()
        t.home()
        t.down()

#this will draw one star
def star(x,y,scale,fill,color):
    t.up()
    goto(x,y)
    t.down()
    if fill == True:
        t.fillcolor(color)
        t.color(color)
        t.begin_fill()
        t.forward(scale)
        t.right(144)
        t.forward(scale)
        t.right(-72)
        t.forward(scale)
        t.right(144)
        t.forward(scale)
        t.right(-72)
        t.forward(scale)
        t.right(144)
        t.forward(scale)
        t.right(-72)
        t.forward(scale)
        t.right(144)
        t.forward(scale)
        t.right(-72)
        t.forward(scale)
        t.right(144)
        t.forward(scale)
        t.right(-72)
        t.end_fill()
        t.up()
        t.home()
        t.down()
    else:
        t.color(color)
        t.forward(scale)
        t.right(144)
        t.forward(scale)
        t.right(-72)
        t.forward(scale)
        t.right(144)
        t.forward(scale)
        t.right(-72)
        t.forward(scale)
        t.right(144)
        t.forward(scale)
        t.right(-72)
        t.forward(scale)
        t.right(144)
        t.forward(scale)
        t.right(-72)
        t.forward(scale)
        t.right(144)
        t.forward(scale)
        t.right(-72)
        t.up()
        t.home()
        t.down()

#this will draw one wave
def wave(x,y,scale,fill,color):
    t.up()
    goto(x,y)
    t.down()
    if fill == True:
        t.fillcolor(color)
        t.color(color)
        t.begin_fill()
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.end_fill()
        t.up()
        t.home()
        t.down()
    else:
        t.color(color)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.up()
        t.home()
        t.down()

#this will draw one type of flower
def flower_one(x,y,scale,fill,color):
    t.up()
    goto(x,y)
    t.down()
    if fill == True:
        t.color("green")
        t.width(scale*0.2)
        t.right(90)
        t.forward(scale)
        t.up()
        goto(x+(.70*scale),y+(1.5*scale))
        t.down()
        t.width(1)
        t.fillcolor(color)
        t.color(color)
        t.begin_fill()
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.end_fill()
        t.up()
        t.home()
        t.down()

    else:
        t.color("green")
        t.width(scale*0.2)
        t.right(90)
        t.forward(scale)
        t.up()
        goto(x+(.70*scale),y+(1.5*scale))
        t.down()
        t.width(1)
        t.color(color)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.up()
        t.home()
        t.down()

#this will draw a second type of flower
def flower_two(x,y,scale,fill,color):
    t.up()
    goto(x,y)
    t.down()
    if fill == True:
        t.color("green")
        t.width(scale*0.2)
        t.right(90)
        t.forward(scale)
        t.up()
        goto(x-(scale*0.75),y+scale)
        t.down()
        t.width(1)
        t.fillcolor(color)
        t.color(color)
        t.begin_fill()
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.left(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.left(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.left(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.end_fill()
        t.up()
        t.home()
        t.down()

    else:
        t.color("green")
        t.width(scale*0.2)
        t.right(90)
        t.forward(scale)
        t.up()
        goto(x-(scale*0.75),y+scale)
        t.down()
        t.width(1)
        t.color(color)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.left(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.left(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.left(90)
        t.circle(scale,45)
        t.right(90)
        t.circle(scale,45)
        t.up()
        t.home()
        t.down()

#this will draw one tower
def tower(x,y,scale):
    blocks(x,y,scale)
    blocks(x+(scale*0.25),y+scale,scale*0.5)
    blocks(x+(scale*0.38),y+scale + scale*0.5,scale*0.25)

#this will draw one mountain
def mountain(x,y,scale,fill,color):
    triangle(x,y,scale,fill,color)
    triangle(x+(scale*0.25),y+(scale*0.5),scale*0.5,fill,"white")

#this will draw one tree 
def tree(x,y,scale,fill,color):
    bar(x,y,scale*0.25,fill,"brown")
    t.up()
    t.home()
    t.down()
    triangle(x-(scale*0.45),y+(scale*0.5),scale,fill,"green")
    triangle(x-(scale*0.20),y+scale,scale*0.5,fill,"green")
    triangle(x-(scale*0.073),y+(scale*1.25),scale*0.25,fill,"green")

'''
def main():

main()
'''